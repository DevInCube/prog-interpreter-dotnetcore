program = statements;
statements = {statement};
statement =
    ";"
    | expr, [";"];

statement expression = 
    var decl expression
    | compound expression
    | select expression
    | loop expression;

compound expression = "{", statements, "}";
var decl expression = "let", identifier, ["=", expr];
select expression = "if", "(", expr, ")", statement, ["else", statement];
loop expression = "while", "(", expr, ")", statement;

expr = assign;
assign = identifier, "=", expr | logic or;
logic or = logic and | logic or, "||", logic and;
logic and = logic eq | logic and, "&&", logic eq;
logic eq = logic comp | logic eq, ("==" | "!="), logic comp;
logic comp = add | logic comp, ("<" | "<=" | ">" | ">="), add;
add = mult | add, ("+" | "-"), mult;
mult = unary | mult, ("*" | "/" | "%"), unary;
unary = primary | ("!" | "+" | "-"), primary;
primary = identifier | func call | "(", expr, ")" | literal | statement expression;
func call = identifier, "(", [expr], {",", expr}, ")";

# lexical grammar
number literal = number;
string literal = '"', {character  - '"'}, '"';

identifier = (letter | "_"), {letter | digit | "_"};
number = digit, {digit}, [".", digit, {digit}]; 
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
space = " " | "\r" | "\n" | "\t";
symbol = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"
       | "'" | '"' | "=" | "|" | "." | "," | ";" ;
character = letter | digit | symbol | space | "_" ;

spaces = space, {space};
separator = "(" | ")" | "{" | "}" | ",";
keyword = "let" | "if" | "else" | "while" | "none" | "true" | "false";
operator = "+" | "-" | "!" | "*" | "/" | "%" 
        | "==" | "!=" | "<" | "<=" | ">" | ">="
        | "&&" | "||" | "=";
word = keyword | identifier;
number literal = number;
none literal = "none";
boolean literal = "true" | "false";
literal = number literal | string literal | boolean literal | none literal;

line comment = "//", {character - "\n"}, "\n";

token = spaces | word | literal | separator | line comment | operator;